import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters


from handlers.generation import generate_easy, generate_medium, generate_strong
from handlers.checking import check_password_strength
from handlers.advice import ADVICE_TEXTS

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å",
                              callback_data='main_generate')],
        [InlineKeyboardButton("üí™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è",
                              callback_data='main_check')],
        [InlineKeyboardButton("üéì –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                              callback_data='main_advice')],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_generation_menu_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–æ—Å—Ç–æ–π", callback_data='gen_easy'),
            InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data='gen_medium'),
            InlineKeyboardButton("–ù–∞–¥–µ–∂–Ω—ã–π", callback_data='gen_strong'),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                              callback_data='back_to_main')],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_advice_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîê –ß—Ç–æ —Ç–∞–∫–æ–µ 2FA?", callback_data='advice_2fa')],
        [InlineKeyboardButton("üé£ –ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∏—à–∏–Ω–≥?",
                              callback_data='advice_phishing')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                              callback_data='back_to_main')],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_back_to_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                              callback_data='back_to_main')]
    ]
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    start_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
        " –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
    )
    await update.message.reply_html(start_text, reply_markup=get_main_menu_keyboard())


async def main_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == 'back_to_main':
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:',
            reply_markup=get_main_menu_keyboard()
        )
    elif data == 'main_generate':
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è:',
            reply_markup=get_generation_menu_keyboard()
        )
    elif data == 'main_advice':
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏ —Ç–µ–º—É, –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:',
            reply_markup=get_advice_menu_keyboard()
        )
    elif data == 'main_check':
        await query.edit_message_text(
            text=(
                "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
                "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è."
            ),
            reply_markup=get_back_to_main_keyboard()
        )
    elif data in ['gen_easy', 'gen_medium', 'gen_strong']:
        if data == 'gen_easy':
            password = generate_easy()
            level = '–ø—Ä–æ—Å—Ç–æ–≥–æ'
        elif data == 'gen_medium':
            password = generate_medium()
            level = '—Å—Ä–µ–¥–Ω–µ–≥–æ'
        else:
            password = generate_strong()
            level = '–Ω–∞–¥–µ–∂–Ω–æ–≥–æ'

        await query.edit_message_text(
            text=f"–¢–≤–æ–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å {level} —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n\n`{password}`\n\n–ù–∞–∂–º–∏ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.",
            parse_mode='Markdown',
            reply_markup=get_generation_menu_keyboard()
        )
    elif data in ADVICE_TEXTS:
        await query.edit_message_text(
            text=ADVICE_TEXTS[data],
            parse_mode='Markdown',
            reply_markup=get_advice_menu_keyboard()
        )


async def handle_password_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    password = update.message.text

    try:
        await update.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    strength_feedback = await check_password_strength(password)

    await update.message.reply_text(
        strength_feedback,
        reply_markup=get_back_to_main_keyboard(),
        parse_mode='Markdown'
    )


def main() -> None:
    token = os.getenv("TOKEN")
    if not token:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ TOKEN=...")

    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(CallbackQueryHandler(main_button_callback))

    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, handle_password_check))

    application.run_polling()


if __name__ == "__main__":
    main()
